#ifndef ___CUBE_SET__H
#define ___CUBE_SET__H

#include<base_types.h>

// 24-bit wide data stored in BitMap32 is to represent sets of CubeIDs

class CubeSet
{
  enum TransMode
  {
    trNormal,
    trLow,
    trHigh
  };

  static CubeSet * Singleton;
  static const BitMap32ID * m_lowMapLeft;
  static const BitMap32ID * m_highMapLeft;

  static const BitMap32ID * m_lowMapRight;
  static const BitMap32ID * m_highMapRight;

  static BitMap32ID MultipleRotation( const CubeID, BitMapID, const CubeSet::TransMode tr = CubeSet::trNormal, const bool swp = false );
  CubeSet();
  ~CubeSet();

public:
  static void Instance() 
  { 
    if ( Singleton == nullptr ) Singleton = new CubeSet;
  }
  static void OnExit()
  {
    delete Singleton;
    Singleton = nullptr;
  }
  // create a new CubeID set generated by an original set rotated with a given CubeID
  // technically, the cache splitted into two 12-bit wide sequences
  static BitMap32ID GetCubeSet ( const CubeID cid, const BitMap32ID sid )
  {
    return m_lowMapLeft[ 24 * ( sid & 4095 ) + cid ] | m_highMapLeft[ 24 * ( sid >> 12 ) + cid ];
  }
  static BitMap32ID GetCubeSet ( const BitMap32ID sid, const CubeID cid )
  {
    return m_lowMapRight[ 24 * ( sid & 4095 ) + cid ] | m_highMapRight[ 24 * ( sid >> 12 ) + cid ];
  }
  static void PrintHead();
  static void Print ( BitMap32ID bid, const bool head = false );
  static void Print_( BitMap32ID bid, const bool head = false );
};

#endif  //  ! ___CUBE_SET__H
